#include <stdio.h>  
#include <stdlib.h> 
long _mergeSort(int arr[], int temp[], int left, int right); 
long merge(int arr[], int temp[], int left, int mid, int right); 

long  mergeSort(int arr[], int array_size) 
{ 
    int* temp = (int*)malloc(sizeof(int) * array_size); 
    return _mergeSort(arr, temp, 0, array_size - 1); 
} 

long  _mergeSort(int arr[], int temp[], int left, int right) 
{ 
    int mid;
    long inv_count = 0; 
    if (right > left) { 
        mid = (right + left) / 2; 
        inv_count = _mergeSort(arr, temp, left, mid); 
        inv_count += _mergeSort(arr, temp, mid + 1, right); 
        inv_count += merge(arr, temp, left, mid + 1, right); 
    } 
    return inv_count; 
} 

long  merge(int arr[], int temp[], int left, int mid, int right) 
{ 
    int i, j, k; 
    long inv_count = 0; 

    i = left; 
    j = mid; 
    k = left; 
    while ((i <= mid - 1) && (j <= right)) { 
        if (arr[i] <= arr[j]) { 
            temp[k++] = arr[i++]; 
        } 
        else { 
            temp[k++] = arr[j++]; 

            inv_count = inv_count + (mid - i); 
        } 
    } 

    while (i <= mid - 1) 
        temp[k++] = arr[i++]; 

    while (j <= right) 
        temp[k++] = arr[j++]; 

    for (i = left; i <= right; i++) 
        arr[i] = temp[i]; 

    return inv_count; 
} 
int main()
{
    int n;
    scanf("%d",&n);
    int a[n];
    for(int i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
    printf("%ld",mergeSort(a,n));
    return 0;
}

