/*We define the Palindromic Distance of a String as the minimum number of characters that need to be modified in order to turn the String into a palindrome. 

For example :

"cook" -> "cooc" (Palindrome),
Hence Distance("cook") = 1. 

"fluffy" -> "flufff" -> "ffufff" -> "ffffff" (Palindrome), 
Hence Distance("fluffy") = 3.

Now, you are given N number of strings, and your task is to find out which string has the farthest Distance from being a palindrome and print it.

INPUT
First line contains number of strings N. 
Next N lines each contain one string.

OUTPUT
Print one string that is the farthest out of all strings from being a palindrome.

CONSTRAINTS
1 ≤ N ≤ 103 
Each string has length of atmost 1000 
Strings consists of lowercase english characters only
*/

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
int n,c=0,l;
scanf("%d",&n);
char s[1005];
while(n--)
{
char a[1005];
scanf("%s",a);
int x=0;
int m=strlen(a);
for(int i=0;i<m/2;i++)
if(a[i]!=a[m-i-1])
x++;
if(x>c)
{
c=x;
l=m;
for(int i=0;i<m;i++)
{
s[i]=a[i];
}
}
}
for(int i=0;i<l;i++)
printf("%c",s[i]);
return 0;
}
